openapi: 3.0.0
info:
  title: repair_shop_db
  version: 1.0.0
  description: 'Mock mechanic workshop'
servers:
  - url: localhost
paths:
  /customers/:
    parameters: []
    post:
      summary: /customers - init 1 - 201/400
      parameters: []
      responses: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                phone:
                  type: string
                  format: utc-millisec
                password:
                  type: string
    get:
      summary: /customers - read all - 200/400
      parameters: []
      responses: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                phone:
                  type: string
                  format: utc-millisec
                password:
                  type: string
    put:
      summary: /customers/ - edit customer 1 - no phone bad request - 400
      parameters: []
      responses: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
    delete:
      summary: /customers/ - delete customer 2 -200/400
      parameters: []
      responses: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
  /customers/login:
    parameters: []
    post:
      summary: /customers - login customer 1, e:kyle@gmail.com, p:test - 200
      parameters: []
      responses: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
  /mechanics/:
    parameters: []
    post:
      summary: /mechanics - init 1 - 201/400
      parameters: []
      responses: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                phone:
                  type: string
                  format: utc-millisec
                password:
                  type: string
                salary:
                  type: number
    get:
      summary: /mechanics - read all - 200
      parameters: []
      responses: {}
  /mechanics/login:
    parameters: []
    post:
      summary: /login - mechanic1 login
      parameters: []
      responses: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
  /inventory/:
    parameters: []
    post:
      summary: /inventory/ - init product 1 - 201/400
      parameters: []
      responses: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                product_name:
                  type: string
                price:
                  type: number
                recallable:
                  type: boolean
    get:
      summary: /inventory - get all, including no_longer_used - 200
      parameters: []
      responses: {}
  /service_tickets/:
    parameters: []
    post:
      summary: /service_tickets/ - init 1 (customer 1) - 201/400
      parameters: []
      responses: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                vin:
                  type: string
                service_date:
                  type: string
                  format: date
                service_desc:
                  type: string
                customer_id:
                  type: integer
    get:
      summary: /service_tickets - read all - 200/400
      parameters: []
      responses: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                phone:
                  type: string
                  format: utc-millisec
                password:
                  type: string
  /customers/1:
    parameters: []
    get:
      summary: /customers/<id> - read 1 - 200/400 Copy
      parameters: []
      responses: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                phone:
                  type: string
                  format: utc-millisec
                password:
                  type: string
  /inventory/current:
    parameters: []
    get:
      summary: /inventory/current - get all, excluding no_longer_used - 200
      parameters: []
      responses: {}
  /inventory/1:
    parameters: []
    get:
      summary: /inventory/<inventory_id> - by id, excluding no_longer_used - 200
      parameters: []
      responses: {}
    put:
      summary: /inventory/<inventory_id> - by id, excluding no_longer_used - 200 Copy
      parameters: []
      responses: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                product_name:
                  type: string
                price:
                  type: integer
    delete:
      summary: inventory/<inventory_id> - by id, set to no_longer_used - 200
      parameters: []
      responses: {}
  /inventory/search:
    parameters: []
    get:
      summary: /inventory/search - all non-PK values searchable - 200/404
      parameters:
        - name: name
          in: query
          required: false
          example: a
          schema:
            type: string
        - name: price
          in: query
          required: false
          example: '1'
          schema:
            type: integer
        - name: recalled
          in: query
          required: false
          example: '0'
          schema:
            type: integer
        - name: recallable
          in: query
          required: false
          example: '1'
          schema:
            type: integer
        - name: no_longer_used
          in: query
          required: false
          example: '0'
          schema:
            type: integer
      responses: {}
  /inventory/shop:
    parameters: []
    get:
      summary: >-
        /inventory/shop - web storefront get all, !no_longer_used - only price
        and name - 200
      parameters: []
      responses: {}
  /inventory/shop/product/1:
    parameters: []
    get:
      summary: >-
        /inventory/shop/product/<inventory_id> - web storefront inventory by id
        - only price and name - 200
      parameters: []
      responses: {}
  /inventory/shop/search:
    parameters: []
    get:
      summary: >-
        /inventory/shop/search - web storefront inventory search - only price
        and name - 200
      parameters:
        - name: name
          in: query
          required: false
          example: oil
          schema:
            type: string
      responses: {}
  /mechanics/4:
    parameters: []
    put:
      summary: /mechanics/4 - update mechanic 4's name - 200/400
      parameters: []
      responses: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                name:
                  type: string
                phone:
                  type: string
                  format: utc-millisec
                password:
                  type: string
                salary:
                  type: integer
  /mechanics:
    parameters: []
    get:
      summary: /mechanics - read all - 200 Copy
      parameters: []
      responses: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                phone:
                  type: string
                  format: utc-millisec
                password:
                  type: string
  /mechanics/top-mechanics:
    parameters: []
    get:
      summary: /mechanics/top_mechanics - show top 3 mechanics - 200
      parameters: []
      responses: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                phone:
                  type: string
                  format: utc-millisec
                password:
                  type: string
  /mechanics/9:
    parameters: []
    put:
      summary: /mechanics/9 - bad request - mechanic not found - 400
      parameters: []
      responses: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                name:
                  type: string
                phone:
                  type: string
                  format: utc-millisec
                salary:
                  type: integer
  /mechanics/5:
    parameters: []
    delete:
      summary: /mechanics/5 - delete mechanic by id - 200/400
      parameters: []
      responses: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
  /mechanics/current-customer-search:
    parameters: []
    get:
      summary: /mechanics/current-customer-search?id=1
      parameters:
        - name: id
          in: query
          required: false
          example: '1'
          schema:
            type: integer
      responses: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
  /mechanics/deleted-customer-search:
    parameters: []
    get:
      summary: /mechanics/deleted-customer-search?name=r
      parameters:
        - name: name
          in: query
          required: false
          example: r
          schema:
            type: string
      responses: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
  /service_tickets/4:
    parameters: []
    get:
      summary: /service_tickets/1 - read service tickets by id - 200/400
      parameters: []
      responses: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                phone:
                  type: string
                  format: utc-millisec
                password:
                  type: string
  /service_tickets/4/edit-mechanics:
    parameters: []
    put:
      summary: >-
        /service_tickets/4/edit-mechanics - edit mechanic assignment on
        service_tickets - add [1,2], remove [3,4] - 200/400
      parameters: []
      responses: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                add_mechanic_ids:
                  type: array
                  items:
                    type: integer
                remove_mechanic_ids:
                  type: array
                  items:
                    type: integer
  /service_tickets/1/edit-mechanics:
    parameters: []
    put:
      summary: >-
        /service_tickets/1/edit-mechanics - edit mechanic assignment on
        service_tickets - add [1,3], remove[2,4] - 200/400
      parameters: []
      responses: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                add_mechanic_ids:
                  type: array
                  items:
                    type: integer
                remove_mechanic_ids:
                  type: array
                  items:
                    type: integer
  /service_tickets/2/edit-mechanics:
    parameters: []
    put:
      summary: >-
        /service_tickets/2/edit-mechanics - edit mechanic assignment on
        service_tickets - add [1,3], remove[2,4] - 200/400
      parameters: []
      responses: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                add_mechanic_ids:
                  type: array
                  items:
                    type: integer
                remove_mechanic_ids:
                  type: array
                  items:
                    type: integer
  /service_tickets/3/edit-mechanics:
    parameters: []
    put:
      summary: >-
        /service_tickets/3/edit-mechanics - edit mechanic assignment on
        service_tickets - add [1,2], remove [3,4] - 200/400
      parameters: []
      responses: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                add_mechanic_ids:
                  type: array
                  items:
                    type: integer
                remove_mechanic_ids:
                  type: array
                  items:
                    type: integer
  /service_tickets/1/edit-inventory:
    parameters: []
    put:
      summary: >-
        /service_tickets/1/edit-inventory - edit inventory on service_tickets -
        add [1,6], remove[] - 200/400 Copy
      parameters: []
      responses: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                add_inventory_ids:
                  type: array
                  items:
                    type: integer
                remove_inventory_ids:
                  type: array
                  items: {}
  /service_tickets/assigned-tickets/search:
    parameters: []
    get:
      summary: >-
        /assigned-tickets/search?any=oil - get tickets currently assigned to
        logged in mechanic - 200/404
      parameters:
        - name: any
          in: query
          required: false
          example: oil
          schema:
            type: string
      responses: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
  /service_tickets/my-tickets:
    parameters: []
    get:
      summary: >-
        /service_tickets/my-tickets - logged in customer's tickets (id:1) -
        200/404
      parameters: []
      responses: {}
