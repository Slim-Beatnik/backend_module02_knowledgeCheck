
swagger: "2.0"
info:
  title: "Repair Shop Database"
  description: "Mock mechanic shop db"
  version: "1.2.0"
schemes:
- "http"
host: "127.0.0.1:5000"

consumes:
  - "application/json"
produces:
  - "application/json"
paths:

  /customers/login:
    post:
      tags:
        - Customers
      summary: "Login endpoint, (generates token)"
      description: "Validates customer credentials, generates and return a customer specific token. *Token times out in 1 hour*"
      parameters:
        - in: "body"
          name: "body"
          description: "Login Credentials"
          required: true
          schema:
            $ref: "#/definitions/LoginCredentials"
      responses:
        200:
          description: "Login successful"
          schema:
            $ref: "#/definitions/LoginResponse"
            example:
              application/json:
                {
                  "email": "kyle@gmail.com",
                  "password": "test"
                }
        400:
          description: "Required data missing from body"
          schema: 
            $ref: "#/definitions/LoginMessage"
            example:
              application/json:
                {
                  "message": "Username and password required."
                }
        401:
          description: "Email or Password not found to match OR user.soft_delete=1 (check user 2 after delete)"
          schema:
            $ref: "#/definitions/LoginError"
            example:
              application/json:
                {
                  "error": "Invalid email or password!"
                }

  /customers/:
    post:
      tags:
        - Customers - Method Protection -> Customer Token
      summary: "Create Customer"
      description: "Data object requires: name, email (*must be unique*), phone number (*11 character limit*) and password.\n*Limited to 5 per day*"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/CreateCustomerPayload"
      responses:
        201:
          description: "Customer creation successful"
          schema:
            $ref: "#/definitions/CreateCustomerResponse"
            example:
              application/json:
                {
                  "name": "Kyle",
                  "email": "kyle@gmail.com",
                  "password": "test",
                  "phone": "0123456789"
                }
        400:
          description: "Required data missing from body"
          schema: 
            $ref: "#/definitions/Customer400Message"
            example:
              application/json:
                {
                  "name": "Kyle"
                }
        401:
          description: "Email already associated with account - same email as first example. \n*Note* Testing duplicate email will reduce number of attempts per limiter"
          schema:
            $ref: "#/definitions/LoginError"
            example:
              application/json:
                {
                  "error": "Email already associated with an account."
                }

    put:
      tags:
      - Customers - Method Protection -> Customer Token
      summary: "Change customer data - PROTECTED METHOD - add 'Bearer ' and paste in the token"
      description: "Customer id based on bearer token decode payload, Logged-in customer can change their data.\n*Change some data to test - Limit 6 per day*"
      
      security:
        - bearerAuth: []
      
      parameters:
        - in: "body"
          name: "body"
          description: "Customer data"
          required: true
          schema:
            $ref: ""
            example:
              {
                "name": "Kyle",
                "email": "",
                "password": "",
                "phone": "9876543210"
              }
      
      responses:
        200:
          description: "Change successful"
          schema:
            $ref: ""
            example:
              description: "Uppercase name field, and updated phone number"
              application/json:
                {
                  "name": "Kyle",
                  "email": "kyle@gmail.com",
                  "password": "test",
                  "phone": "98765443210"
                }
        400:
          description: "Validation error - if no phone data is present in request"
          schema:
            $ref: "#/definitions/Customer400Message"
            example:
              application/json:
                {
                  "message": "{'phone': ['Missing data for required field.']} - all customer data fields required."
                }
    delete:
      tags:
      - Customers - Method Protection -> Customer Token
      summary: "Soft delete customers - PROTECTED METHOD - add 'Bearer ' and paste in the token"
      description: "Set soft_delete parameter to 1 (true) - limit: 5 per day\n*NOTE: soft delete used to keep records for tax year or longer if recallable parts used in repair.*"
      
      security:
        - bearerAuth: []

      parameters: []

      responses:
        200:
          description: "Customer successfully marked for deletion"
          schema:
            $ref: "#/definitions/CustomerDeleteResponse"
            example:
              application/json:
                {
                  "message": "Customer successfully marked for deletion"
                }
        404:
          description: "Customer not found"
          schema:
            $ref: "#/definitions/Customer404Error"
            example:
              application/json:
                {
                  "error": "Customer not found."
                }
    
    get:
      tags:
        - Customers - Method Protection -> Mechanic Token
      summary: "Get All Customers - PROTECTED METHOD - add 'Bearer ' and paste in the mechanic token"
      description: "Mechanics/Admin only\n *Example* /customers/?page=1&per_page=5"

      security:
        - bearerAuth: []

      parameters:
        - in: query
          name: page
          type: integer
          required: false
        - in: query
          name: per_page
          type: integer
          required: false

      responses:
        200:
          description: "All customers view for mechanics, pagination is optional, "
          schema:
            $ref: "#/definitions/ViewCustomersAsMechanic"
            example:
              application/json:
                [{
                  "id": 1,
                  "name": "Kyle",
                  "email": "kyle@gmail.com",
                  "phone": "0123456789"
                },
                {
                  "id": integer,
                  "name": "Rev",
                  "email": "rev@gmail.com",
                  "phone": "1234567890"
                }]

  /customers/{customer_id}:
    get:
      tags:
        - Customers - Method Protection -> Mechanic Token
      summary: "Get customer by id number - PROTECTED METHOD - add 'Bearer ' and paste in the mechanic token"
      description: "Mechanic route to get customer by id"

      security:
        - bearerAuth: []

      parameters:
        - in: path
          name: customer_id
          type: integer
          required: true
          description: "The customer ID number"

      responses:
        200:
          description: "Customer data shown in a successful response"
          schema:
            $ref: "#/definitions/ViewCustomerAsMechanic"
            example:
              application/json:
                {
                  "id": integer,
                  "name": "Kyle",
                  "email": "kyle@gmail.com",
                  "phone": "0123456789"
                }
        404:
          description: "Customer not found"
          schema:
            $ref: "#/definitions/Customer404Error"
            example:
              application/json:
                {"error": "Customer not found"}

  /customers/my-account:
    get:
      tags:
        - Customers - Method Protection -> Customer Token
      summary: "Get customer by customer token - PROTECTED METHOD - add 'Bearer ' and paste in the customer token"
      description: "Customer route to view their data."

      security:
        - bearerAuth: []

      responses:
        200:
          description: "Customer data upon succesful response"
          schema:
            $ref: "#/definitions/CreateCustomerResponse"
            example:
              application/json:
                {
                  "name": "Kyle",
                  "email": "kyle@gmail.com",
                  "password": "test",
                  "phone": "0123456789"
                }
        404:
          description: "Customer not found"
          schema:
            $ref: "#/definitions/Customer404Error"
            example:
              application/json:
                {"error": "Customer not found"}

definitions: 
  LoginCredentials:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"

    required:
      - email
      - password

    example:
      email: "kyle@gmail.com"
      password: "test"

  LoginResponse:
    type: "object"
    properties:
      auth_token:
        type: "string"
      message:
        type: "string"
      status:
        type: "string"

    example:
      auth_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NTE4MzE0ODEsImlhdCI6MTc1MTgyNzg4MSwic3ViIjoiMSIsInJvbGUiOiJjdXN0b21lciJ9.pCT3Ksn3aVgg8hEChUW1Z9hfDrRXiwnUThXK3gjD_fM"
      message: "Successfully Logged In"
      status: "success"

  LoginMessage:
    type: "object"
    properties:
      message:
        type: "string"
    example:
      message: "Username and password required."

  LoginError:
    type: "object"
    properties:
      error:
        type: "string"
    example:
      error: "Invalid email or password!"

  CreateCustomerPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
        maxLength: 11
    example:
      name: "Kyle"
      email: "kyle@gmail.com"
      password: "test"
      phone: "0123456789"

  CreateCustomerResponse:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
    example:
      name: "Kyle"
      email: "kyle@gmail.com"
      password: "test"
      phone: "0123456789"

  ViewCustomersAsMechanic:
    type: array
    description: "pagination optional via ?page=*integer*&per_page=*integer*"
    items:
      $ref: "#/definitions/ViewCustomerAsMechanic"
    example:
        [
          {
              "email": "kyle@gmail.com",
              "id": 1,
              "name": "kyle",
              "phone": "9714175138",
              "soft_delete": false
          },
          {
              "email": "revel@gmail.com",
              "id": 2,
              "name": "rev",
              "phone": "5033286403",
              "soft_delete": true
          },
          {
              "email": "ace@gmail.com",
              "id": 3,
              "name": "aeslin",
              "phone": "9713403030",
              "soft_delete": false
          },
          {
              "email": "dummy@gmail.com",
              "id": 4,
              "name": "dummy",
              "phone": "5033286403",
              "soft_delete": false
          },
          {
              "email": "jaime@gmail.com",
              "id": 5,
              "name": "jaime",
              "phone": "1234567890",
              "soft_delete": false
          }
        ]

  ViewCustomerAsMechanic:
    type: object
    description: "Password not visible to mechanic."
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
    example:
      id: 1
      name: "Kyle"
      email: "kyle@gmail.com"
      phone: "0123456789"
      soft_delete: false

  Customer400Message:
    type: object
    properties: 
      message:
        type: "string"
    example:
      message: "'error details' - all customer data fields required."

  Customer404Error:
    type: object
    properties:
      error:
        type: "string"
    example:
      error: "Customer not found"

  CustomerDeleteResponse:
    type: object
    properties:
      message:
        type: "string"
    example:
      message: "Customer successfully marked for deletion"



securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header
    bearerFormat: JWT
    
  